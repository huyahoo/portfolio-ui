import { Store } from 'vuex';

interface Storage {
    getItem: (key: string) => object;
    setItem: (key: string, value: any) => void;
    removeItem: (key: string) => void;
}

interface Options<State> {
    /**
     * localStorage saved key
     */
    key: string;
    /**
     * cached module name
     * Do not pass means cache all
     * pass only the specified cache
     */
    paths: string[];
    /**
     * storage
     */
    storage: Storage;
    /**
     * Whether to prefetch data
     */
    fetchBeforeUse: boolean;
    /**
     * Default method of prefetching data
     */
    fetchBeforeUseFn: (key: string, storage: Storage) => any;
}

declare function VuexPersistedstate<State>({ key, paths, storage, fetchBeforeUse, fetchBeforeUseFn }?: Options<State>): (store: Store<State>) => void;

export { VuexPersistedstate as default };
